import java.util.*;
import java.io.*;

public class Sorting {
	
	public static List<double[]> arr=new ArrayList<double[]>();
	
	public static double[] buffer;
	
	public static double abs(double s) {
		if(s>0) return s;
		return -s;
	}
	
	public static void mergesort(int l,int r,int col) {
		if(l<r) {
			int mid=(l+r)/2;
			mergesort(l,mid,col);
			mergesort(mid+1,r,col);
			merge(l,mid,r,col);
		}
	}
	public static void merge(int l,int m,int r,int column) {
		 for (int i = l; i <=r; i++) 
             buffer[i] = arr.get(i)[column];
             int i = l;
             int j = m+1;
             int p = l;
             while(i<=m&&j<=r) {
            	 if((int)10000*buffer[i]>(int)10000*buffer[j]) {
            		 arr.get(p)[column]=buffer[j];
            	     j++;
            	 }
            	 else
            	 {
            		 arr.get(p)[column]=buffer[i];
            		 i++;
            	 }
            	 p++;  
     }
             while(j<=r) 
                 arr.get(p++)[column]=buffer[j++];
             while(i<=m)
            	 arr.get(p++)[column]=buffer[i++];
	}
	

	public static void main(String [] args)  throws IOException {
		Scanner in=new Scanner(new FileReader("input.csv"));
		PrintWriter out=new PrintWriter(new FileWriter("output.txt"));
		String[] array;
		double[] temp;
		ArrayList<Integer> fine=new ArrayList<Integer>();
		int leng=0;
		while(in.hasNextLine()) {
			array=in.nextLine().split(",");
			leng=array.length;
			temp=new double[array.length];
			for(int i=0;i<array.length;i++)
				temp[i]=Double.parseDouble(array[i]);
			  arr.add(temp);
		} 
		buffer=new double[arr.size()];
		for(int i=0;i<leng;i++)
			mergesort(0,arr.size()-1,i);
		
		boolean fl=true;
		int answer=0;
		for(int i=0;i<leng;i++) {
			double diff;
		    if(arr.get(0)[i]<0) {
			  answer++;
			  continue;
		    }
			if(arr.size()>1)
			     diff=arr.get(1)[i]-arr.get(0)[i];
			else continue;
			for(int j=2;j<arr.size();j++)
				 if(10000*(arr.get(j)[i]-arr.get(j-1)[i])!=diff) {
					 answer++;
					 fl=false;
					 break;
				 }
			if(fl) break;
			fl=true;
			
		}
		
		out.print(answer);
		out.close();
	}
}
